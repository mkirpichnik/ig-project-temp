// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WeddingForward.Data;

namespace WeddingForward.Data.Migrations
{
    [DbContext(typeof(WeddingForwardContext))]
    partial class WeddingForwardContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WeddingForward.Data.Models.AccountLinkedPosts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("OwnerUsername")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PostId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerUsername");

                    b.ToTable("AccountLinkedPosts");
                });

            modelBuilder.Entity("WeddingForward.Data.Models.AccountSet", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Follow")
                        .HasColumnType("int");

                    b.Property<int>("Following")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostsCount")
                        .HasColumnType("int");

                    b.Property<string>("ProfilePicUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicUrlHD")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Username");

                    b.ToTable("UserAccounts");
                });

            modelBuilder.Entity("WeddingForward.Data.Models.AccountsSessionSet", b =>
                {
                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAlive")
                        .HasColumnType("bit");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SessionId");

                    b.ToTable("AccountsSession");
                });

            modelBuilder.Entity("WeddingForward.Data.Models.LogsSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Error")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationLogsHistory");
                });

            modelBuilder.Entity("WeddingForward.Data.Models.PostCheckDetailsSet", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CommentsCount")
                        .HasColumnType("int");

                    b.Property<int>("LikesCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PostCheckDetailsSet");
                });

            modelBuilder.Entity("WeddingForward.Data.Models.PostCheckerHistorySet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CheckedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PostCheckDetailsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PostId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("PostCheckDetailsId");

                    b.HasIndex("PostId");

                    b.ToTable("PostCheckerHistory");
                });

            modelBuilder.Entity("WeddingForward.Data.Models.PostContentSet", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("PostId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ViewsCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("PostContent");
                });

            modelBuilder.Entity("WeddingForward.Data.Models.PostSet", b =>
                {
                    b.Property<string>("PostId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CommentsCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LikesCount")
                        .HasColumnType("int");

                    b.Property<string>("OwnerUsername")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PostLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PostId");

                    b.HasIndex("OwnerUsername");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("WeddingForward.Data.Models.ScriptsScheduleSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Args")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStarted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PlanedStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("ScriptType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ScriptsSchedule");
                });

            modelBuilder.Entity("WeddingForward.Data.Models.TaggedReferencesSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PostContentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PostContentId");

                    b.ToTable("Tagged");
                });

            modelBuilder.Entity("WeddingForward.Data.Models.AccountLinkedPosts", b =>
                {
                    b.HasOne("WeddingForward.Data.Models.AccountSet", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerUsername");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("WeddingForward.Data.Models.PostCheckerHistorySet", b =>
                {
                    b.HasOne("WeddingForward.Data.Models.AccountSet", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("WeddingForward.Data.Models.PostCheckDetailsSet", "PostCheckDetails")
                        .WithMany()
                        .HasForeignKey("PostCheckDetailsId");

                    b.HasOne("WeddingForward.Data.Models.PostSet", "Post")
                        .WithMany()
                        .HasForeignKey("PostId");

                    b.Navigation("Account");

                    b.Navigation("Post");

                    b.Navigation("PostCheckDetails");
                });

            modelBuilder.Entity("WeddingForward.Data.Models.PostContentSet", b =>
                {
                    b.HasOne("WeddingForward.Data.Models.PostSet", "Post")
                        .WithMany("PostContents")
                        .HasForeignKey("PostId");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("WeddingForward.Data.Models.PostSet", b =>
                {
                    b.HasOne("WeddingForward.Data.Models.AccountSet", "Owner")
                        .WithMany("Posts")
                        .HasForeignKey("OwnerUsername");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("WeddingForward.Data.Models.TaggedReferencesSet", b =>
                {
                    b.HasOne("WeddingForward.Data.Models.PostContentSet", "PostContent")
                        .WithMany("Tagged")
                        .HasForeignKey("PostContentId");

                    b.Navigation("PostContent");
                });

            modelBuilder.Entity("WeddingForward.Data.Models.AccountSet", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("WeddingForward.Data.Models.PostContentSet", b =>
                {
                    b.Navigation("Tagged");
                });

            modelBuilder.Entity("WeddingForward.Data.Models.PostSet", b =>
                {
                    b.Navigation("PostContents");
                });
#pragma warning restore 612, 618
        }
    }
}
